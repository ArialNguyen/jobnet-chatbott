import BaseService from "@/services/baseService";
import PostType from "@/types/post";
import { QuestionChatbotResponse } from "@/types/ollamaResponse";
import fbService from "@/services/fbService";
import huspotConversationService from "@/services/huspotConversationService";

class ChatService extends BaseService {

    private readonly baseUrl = process.env.NEXT_PUBLIC_BASE_URL

    private readonly elasticApiBaseUrl = process.env.NEXT_PUBLIC_ELASTIC;

    private readonly apiBaseUrl = `${process.env.NEXT_PUBLIC_API_URL}/api`;

    private readonly clientBaseUrl = process.env.NEXT_PUBLIC_CLIENT_URL;

    // private readonly categories = ['T√¨m vi·ªác l√†m B√°n h√†ng / Ti·∫øp th·ªã', 'T√¨m vi·ªác l√†m D·ªãch v·ª•', 'T√¨m vi·ªác l√†m ChƒÉm s√≥c s·ª©c kh·ªèe', 'T√¨m vi·ªác l√†m S·∫£n xu·∫•t', 'T√¨m vi·ªác l√†m H√†ng ti√™u d√πng', 'T√¨m vi·ªác l√†m M√°y t√≠nh / C√¥ng ngh·ªá th√¥ng tin', 'T√¨m vi·ªác l√†m H√†nh ch√≠nh / Nh√¢n s·ª±', 'T√¨m vi·ªác l√†m K·∫ø to√°n / T√†i ch√≠nh', 'T√¨m vi·ªác l√†m Truy·ªÅn th√¥ng / Media', 'T√¨m vi·ªác l√†m X√¢y d·ª±ng', 'T√¨m vi·ªác l√†m K·ªπ thu·∫≠t', 'T√¨m vi·ªác l√†m Gi√°o d·ª•c / ƒê√†o t·∫°o', 'T√¨m vi·ªác l√†m Khoa h·ªçc', 'T√¨m vi·ªác l√†m Kh√°ch s·∫°n / Du l·ªãch', 'T√¨m vi·ªác l√†m Nh√≥m ng√†nh kh√°c']

    private readonly professions = ['B√°n h√†ng / Kinh doanh', 'B√°n l·∫ª / B√°n s·ªâ', 'Ti·∫øp th·ªã / Marketing', 'Ti·∫øp th·ªã tr·ª±c tuy·∫øn', 'T∆∞ v·∫•n', 'V·∫≠n chuy·ªÉn / Giao nh·∫≠n /  Kho v·∫≠n', 'Lao ƒë·ªông ph·ªï th√¥ng', 'D·ªãch v·ª• kh√°ch h√†ng', 'Phi ch√≠nh ph·ªß / Phi l·ª£i nhu·∫≠n', 'An Ninh / B·∫£o V·ªá', 'Lu·∫≠t / Ph√°p l√Ω', 'B∆∞u ch√≠nh vi·ªÖn th√¥ng', 'Y t·∫ø / ChƒÉm s√≥c s·ª©c kh·ªèe', 'D∆∞·ª£c ph·∫©m', 'Thu mua / V·∫≠t t∆∞', 'Xu·∫•t nh·∫≠p kh·∫©u', 'S·∫£n xu·∫•t / V·∫≠n h√†nh s·∫£n xu·∫•t', 'ƒê·ªì g·ªó', 'In ·∫•n / Xu·∫•t b·∫£n', 'An to√†n lao ƒë·ªông', 'Qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng (QA/QC)', 'D·ªát may / Da gi√†y / Th·ªùi trang', 'H√†ng gia d·ª•ng / ChƒÉm s√≥c c√° nh√¢n', 'Th·ª±c ph·∫©m & ƒê·ªì u·ªëng', 'CNTT - Ph·∫ßn c·ª©ng / M·∫°ng', 'CNTT - Ph·∫ßn m·ªÅm', 'H√†nh ch√≠nh / Th∆∞ k√Ω', 'Bi√™n phi√™n d·ªãch', 'Nh√¢n s·ª±', 'B·∫£o hi·ªÉm', 'K·∫ø to√°n / Ki·ªÉm to√°n', 'Ch·ª©ng kho√°n', 'Ng√¢n h√†ng', 'T√†i ch√≠nh / ƒê·∫ßu t∆∞', 'Gi·∫£i tr√≠', 'T·ªï ch·ª©c s·ª± ki·ªán', 'Truy·ªÅn h√¨nh / B√°o ch√≠ / Bi√™n t·∫≠p', 'Qu·∫£ng c√°o / ƒê·ªëi ngo·∫°i / Truy·ªÅn Th√¥ng', 'M·ªπ thu·∫≠t / Ngh·ªá thu·∫≠t / Thi·∫øt k·∫ø', 'N·ªôi ngo·∫°i th·∫•t', 'Ki·∫øn tr√∫c', 'X√¢y d·ª±ng', 'B·∫•t ƒë·ªông s·∫£n', 'D·∫ßu kh√≠', 'H√≥a h·ªçc', 'Kho√°ng s·∫£n', 'C∆° kh√≠ / √î t√¥ / T·ª± ƒë·ªông h√≥a', 'M√¥i tr∆∞·ªùng', 'ƒêi·ªán / ƒêi·ªán t·ª≠ / ƒêi·ªán l·∫°nh', 'B·∫£o tr√¨ / S·ª≠a ch·ªØa', 'Th∆∞ vi·ªán', 'Gi√°o d·ª•c / ƒê√†o t·∫°o', 'N√¥ng nghi·ªáp', 'Th·ªëng k√™', 'ChƒÉn nu√¥i / Th√∫ y', 'Th·ªßy l·ª£i', 'C√¥ng ngh·ªá sinh h·ªçc', 'H√†ng h·∫£i', 'C√¥ng ngh·ªá th·ª±c ph·∫©m / Dinh d∆∞·ª°ng', 'L√¢m Nghi·ªáp', 'Tr·∫Øc ƒë·ªãa / ƒê·ªãa Ch·∫•t', 'Th·ªßy s·∫£n / H·∫£i s·∫£n', 'H√†ng kh√¥ng', 'Nh√† h√†ng / Kh√°ch s·∫°n', 'Du l·ªãch', 'Ng√†nh kh√°c']

    private questionPrompt_gemini = `
    You are a helpful job search assistant. Please return JSON describing the user's question in this conversation using the following schema:
    { "response": str, "minSalary": number, "maxSalary": number, "numberOfList": number, 'professions': list[str] }
    Important: Only return a single piece of valid JSON text.

    Here is the workflow to apply data into the JSON:
    The first thing you need to do is summarize the user's questions from the conversation and always prioritize the latest message. After you have the user's latest question, do the following.

    1. Prioritize the analysis of the latest messages and only analyze the job title, location, salary, position and summarize them into a short, easy-to-understand sentence and save them in the "response". The requirements in the analysis are as follows: The job title, location and position must be concise. Note that you only collect information, absolutely do not provide any additional information arbitrarily if that information is not from the user.
    2. I will give you a list of job professions, your task is to find the job professions that the user wants to ask in my profession list and save it to 'professions', if you don't find any suitable professions in my list then put an empty list in "professions" (Absolutely do not save professions that are not in my list in the 'professions' attribute -- Very important)
    3. If the the newest user question contains information about the salary. I need you to analyze the minimum salary and save it in 'minSalary' (if any) and analyze the largest salary and save it in 'maxSalary' (if any). If the salary not contains, both 'minSalary' and 'maxSalary' fields are null.
    4. If the user's latest question (Analyze only user questions, ignore staff answers) asks for a list of posts (jobs) then you will store the number of listings in the "numberOfList" field, otherwise enter null in "numberOfList".
    Example: User say "T√¥i c·∫ßn t√¨m c√¥ng vi·ªác ki·∫øn tr√∫c s∆∞ l∆∞∆°ng 15-20" your JSON can be like {"response": "ki·∫øn tr√∫c s∆∞ l∆∞∆°ng t·ª´ 15 ƒë·∫øn 20 tri·ªáu", "professions": ["In ·∫•n / Xu·∫•t b·∫£n", "N·ªôi ngo·∫°i th·∫•t", "M·ªπ thu·∫≠t / Ngh·ªá thu·∫≠t / Thi·∫øt k·∫ø", "Ki·∫øn tr√∫c", "X√¢y d·ª±ng"], "minSalary": 15000000, "maxSalary": null, "numberOfList": null}
    Another Example: User ask "T√¨m cho t√¥i 5 b√†i ƒëƒÉng v·ªÅ L·∫≠p tr√¨nh vi√™n v·ªõi m·ª©c l∆∞∆°ng kh√¥ng l·ªõn h∆°n 10 tri·ªáu" your JSON can be like {"response": "L·∫≠p tr√¨nh vi√™n nh·ªè h∆°n 10 tri·ªáu", "professions": ["CNTT - Ph·∫ßn c·ª©ng / M·∫°ng", "CNTT - Ph·∫ßn m·ªÅm", ], "minSalary": null, "maxSalary": 15000000, "numberOfList": 5}
    
    Notice: Your answer the sam e language with user. And each separate sentence must be begin with new line (specifically adding the character '\n' at the end of each sentence).
    Here is conversation:
    {{messages}}
    Here is job professions:
    {{professions}}
    `


    private getQuestionPrompt(messages: Array<any>, professions: Array<string>) {
        return this.questionPrompt_gemini.replace("{{messages}}", messages.join("\n")).replace("{{professions}}", JSON.stringify(professions))
    }

    async getMessage(pageId: string, senderPsid: string, messages: Array<any>) {

        // Prefix Question
        // Check if enough standard

        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/chatgpt`, {
            method: "POST",
            body: JSON.stringify({
                messages: messages.map((message: string) => {
                    return {
                        role: (message.substring(0, message.indexOf(":")) == "USER") ? "user" : "assistant",
                        content: message.substring(message.indexOf(":") + 1)
                    }
                })
            })
        })

        const data = await response.text()
        console.log("DATA: ", data);

        if (data == "OK") { // enough standards
            // Get Data from Vector DB
            const rewriteQues = await this.handleQuestion(messages) // 0,1,2 
            console.log("rewriteQues:", rewriteQues)

            const numberOfList = rewriteQues.numberOfList || 7

            const minSalary = rewriteQues.minSalary
            const maxSalary = rewriteQues.maxSalary

            const professions = rewriteQues.professions

            const posts = (await this.getPosts(rewriteQues.response as string, minSalary, maxSalary, professions)).slice(0, numberOfList)

            // Handle Response to user 
            return this.handleAnswer(pageId, senderPsid, rewriteQues.response as string, posts)
        } else {
            return {
                text: data
            }
        }

    }

    async sendMessageFromAIHubspot(threadId: string, messages: Array<any>) {
        let message = {
            text: "", richText: ""
        }
        // Prefix Question
        // Check if enough standard
        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/chatgpt`, {
            method: "POST",
            body: JSON.stringify({
                messages: messages.map((message: string) => {
                    return {
                        role: (message.substring(0, message.indexOf(":")) == "USER") ? "user" : "assistant",
                        content: message.substring(message.indexOf(":") + 1)
                    }
                })
            })
        })

        const data = await response.text()
        console.log("DATA: ", data);
        if (data == "OK") { // enough standards
            // Get Data from Vector DB
            const rewriteQues = await this.handleQuestion(messages)
            console.log("rewriteQues: ", rewriteQues);

            const numberOfList = rewriteQues.numberOfList || 7

            const minSalary = rewriteQues.minSalary
            const maxSalary = rewriteQues.maxSalary

            const professions = rewriteQues.professions

            const posts = (await this.getPosts(rewriteQues.response as string, minSalary, maxSalary, professions)).slice(0, numberOfList)

            // Handle Response to user
            if (posts.length == 0) {
                // Ask user give more information 
                message.text = `kh√¥ng th·ªÉ t√¨m th·∫•y b√†i ƒëƒÉng ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n '${rewriteQues.response}'. B·∫°n h√£y cung c·∫•p nhi·ªÅu th√¥ng tin c·ª• th·ªÉ h∆°n nh∆∞ sau: l∆∞∆°ng mong mu·ªën, ƒë·ªãa ƒëi·ªÉm, ...`, // Need to create prompt to ask user give more information
                    message.richText = `<div><span>${message.text} üò•üò•üò•</span></div>`
            } else {
                message.text = `ƒê√¢y l√† top ${posts.length} b√†i post v·ªÅ t·ª´ kh√≥a '${rewriteQues.response}'.\n ${posts.map(
                    (post, idx) => { return `${idx + 1}. ${post.title}` }
                ).join("\n")}`
                message.richText = `
                <p>ƒê√¢y l√† top ${posts.length} b√†i post v·ªÅ t·ª´ kh√≥a '${rewriteQues.response}'.<a href="${this.clientBaseUrl}/posts?search=${rewriteQues.response}" rel="noopener">Click ƒë·ªÉ xem chi ti·∫øt</a></p>
                <ol>
                ${posts.map(post => `
                <li>
                <a href="${this.clientBaseUrl}/posts/${post.id}" rel="noopener" target="_blank" style="background-color: #ffff04;">
                    ${post.title}</a>&nbsp;<br>
                    ${post.business.name}<br>
                    ${(!/\d/.test(post.minSalaryString)) ? "Th·ªèa thu·∫≠n" : `${post.minSalaryString} - ${post.maxSalaryString}`}<br>
                    ${post.locations.map(location => location.provinceName).join(" - ")}
                </li>`).join("\n")}
                </ol>
                `
            }
        } else {
            message.text = data
            message.richText = `<div>${data}</div>`
        }
        await huspotConversationService.sendMessageFromAIByDefault({
            threadId, text: message.text, richText: message.richText
        })
    }
    async sendMessageFromAssistantHuspot(threadId: string) {
        await huspotConversationService.sendMessageFromAIByDefault({
            threadId, sender: "ASSISTANT", text: `Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, ch√∫ng t√¥i s·∫Ω tr·∫£ l·ªùi ngay.`, richText: `<div>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, ch√∫ng t√¥i s·∫Ω tr·∫£ l·ªùi ngay üëãü•∞üëã</div>`
        })
    }

    async handleQuestion(messages: Array<any>) {
        let prompt = this.getQuestionPrompt(messages, this.professions).trim()

        let responseObj = {} as QuestionChatbotResponse
        let response = null
        while (true) {
            // Run against if service 503 Service Unavailable
            response = await fetch(`${this.baseUrl}/api`, {
                method: "POST",
                body: JSON.stringify({
                    prompt
                }),
            })
            if (response.status == 200) {
                break
            }
            console.log("Refresh fetch gemini caused by 503");
        }
        try {
            responseObj = await this.getResponseData<QuestionChatbotResponse>(response)
        } catch (error) {
            throw new Error("WRONG_FORMAT_OLLAMA_RESPONE")
        }
        return responseObj
    }

    async handleAnswer(pageId: string, senderPsid: string, rewriteQues: string, posts: PostType[]) {

        if (posts.length == 0) {
            // Ask user give more information 
            return {
                text: `kh√¥ng th·ªÉ t√¨m th·∫•y b√†i ƒëƒÉng ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n '${rewriteQues}'. B·∫°n h√£y cung c·∫•p nhi·ªÅu th√¥ng tin c·ª• th·ªÉ h∆°n nh∆∞ sau: l∆∞∆°ng mong mu·ªën, ƒë·ªãa ƒëi·ªÉm, ... üò•üò•`, // Need to create prompt to ask user give more information
            }
        }
        const postsCard = posts.map(post => ({
            title: post.title,
            image_url: `${this.apiBaseUrl}/businesses/${post.business.id}/profileImage`,
            subtitle: `${post.business.name} \n${`${(!/\d/.test(post.minSalaryString)) ? "Th·ªèa thu·∫≠n" : `${post.minSalaryString} - ${post.maxSalaryString}`}`
                } \n${`${post.locations.map(location => location.provinceName).join(" - ")}`
                }`,
            buttons: [
                {
                    "type": "web_url",
                    "title": "See Detail",
                    "url": `${this.clientBaseUrl}/posts/${post.id}`,
                }
            ]
        })).slice(0, 10)
        console.log("Image URL: " + postsCard[0]['image_url'])

        const res = {
            attachment: {
                type: "template",
                payload: {
                    template_type: "generic",
                    elements: postsCard
                }
            }
        }
        // Send First Message to User
        await fbService.sendOnTyping(pageId, senderPsid)
        await fbService.sendMessage(senderPsid, pageId, {
            text: `ƒê√¢y l√† Top ${postsCard.length} b√†i ƒëƒÉng v·ªÅ t·ª´ kh√≥a '${rewriteQues}'. Xem chi ti·∫øt t·∫°i ƒë√¢y: ${this.clientBaseUrl}/posts?search=${encodeURIComponent(rewriteQues)}}`
        })
        return res
    }

    async getPosts(postName: string, minSalary: number, maxSalary: number, professions: string) {

        const params = new URLSearchParams()
        params.append("search", postName)
        minSalary && params.append("minSalary", minSalary.toString())
        maxSalary && params.append("maxSalary", maxSalary.toString())
        professions && params.append("professions", professions)

        const res = await fetch(`${this.elasticApiBaseUrl}/api/post?${params.toString()}`, {
            method: "GET",
            headers: {
                'Content-Type': 'application/json'
            }
        })
        await this.checkResponseNotOk(res)
        return this.getResponseData(res) as PostType[]
    }
}

const chatService = await new ChatService();

export default chatService